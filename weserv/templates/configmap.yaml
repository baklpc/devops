apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "weserv.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "weserv.labels" . | nindent 4 }}
data:
  imagesweserv.conf: |-
    proxy_cache_path /dev/shm/proxy_cache inactive=8h levels=1:2 keys_zone=images:512m max_size=250m loader_files=5000 use_temp_path=off;
    proxy_cache_min_uses 2;
    proxy_read_timeout 60s;
    proxy_send_timeout 60s;
    proxy_buffers 256 8k;
    proxy_buffering on;

    # Denies access to loopback IP addresses
    weserv_deny_ip 127.0.0.0/8;
    weserv_deny_ip ::1/128;

    # Denies access to link-local and multicast IP addresses
    weserv_deny_ip 169.254.0.0/16;
    weserv_deny_ip 224.0.0.0/4;
    weserv_deny_ip fe80::/64;
    weserv_deny_ip ff00::/8;

    # Denies access to private IP addresses
    weserv_deny_ip 10.0.0.0/8;
    weserv_deny_ip 172.16.0.0/12;
    weserv_deny_ip 192.168.0.0/16;
    weserv_deny_ip fc00::/7;

    upstream images {
      server 127.0.0.1:80;
      keepalive 200;
    }

    #upstream redis {
    #    server 127.0.0.1:6379;
    #
    #    # Or: server unix:/var/run/redis/redis.sock;
    #
    #    # a pool with at most 1024 connections
    #    keepalive 1024;
    #}

    #geo $limit {
    #    default 1;
    #    10.0.0.0/8 0;
    #    192.168.0.0/24 0;
    #}

    #map $limit $limit_key {
    #    0 '';
    #    1 $remote_addr;
    #}

    server {
      listen 80;

      server_name images.weserv.local;

      access_log off;
      error_log /var/log/nginx/weserv-local-error.log;

      root /var/www/imagesweserv/public;
      absolute_redirect off;

      allow 127.0.0.1;
      allow ::1;
      deny all;

      location / {
        resolver 1.2.4.8; # Use Google's open DNS server
        weserv proxy;
        add_header X-Upstream-Response-Length $weserv_response_length;
      }
    }

    server {
      listen 80 default_server;
      listen [::]:80 default_server ipv6only=on;

      server_name _;

      access_log /var/log/nginx/weserv-access.log main buffer=4096 flush=5m;
      access_log /var/log/nginx/weserv-stats.log stats buffer=4096 flush=5m;
      error_log /var/log/nginx/weserv-error.log;

      root /var/www/imagesweserv/public;

      add_header Last-Modified '' always; # Always remove the Last-Modified header
      add_header Cross-Origin-Resource-Policy 'cross-origin' always; # CORP
      add_header Access-Control-Allow-Origin '*' always; # CORS
      add_header Timing-Allow-Origin '*' always;
      add_header X-Images-Api '5' always;
      add_header X-Cache-Status $upstream_cache_status;
      location / {
        expires 1y; # Far-future expiration for static files
        try_files $uri $uri.html$is_args @proxy;
      }

      location = /clear-cache/ {
        return 301 /clear-cache;
      }

      location = /clear-cache {
        default_type application/json;
        add_header Cache-Control 'no-store, must-revalidate';
        add_header Clear-Site-Data '"cache", "storage"';
        return 200 '{"code":200, "mgs":"Browser cache successfully cleared!"}';
      }
      location @proxy {
        proxy_cache images;
        proxy_cache_key '$request_method|wsrv.nl|$request_uri';
        proxy_cache_methods GET HEAD;
        proxy_cache_bypass $http_pragma $http_authorization;
        proxy_cache_valid 200 301 410 7d;
        proxy_cache_valid 429 500 0;
        proxy_cache_valid any 15m;
        proxy_cache_use_stale error timeout updating;
        proxy_pass http://images;
        proxy_set_header Host images.weserv.local;
        proxy_set_header X-Original-Host $http_host;
        proxy_set_header X-Original-Scheme $scheme;
        proxy_set_header X-Forwarded-For $remote_addr;

        # Enable the upstream persistent connection
        proxy_http_version 1.1;
        proxy_set_header Connection '';
      }
    }